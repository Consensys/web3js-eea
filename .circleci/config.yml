---
version: 2.1

executors:
  node_executor:
    docker:
      - image: circleci/node:12.9.0-stretch
  docker_executor:
    machine:
      image: ubuntu-1604:202004-01 #Ubuntu 16.04, docker 19.03.8, docker-compose 1.25.5
      docker_layer_caching: true

jobs:
  build:
    executor: node_executor
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: install packages
        command: npm install
    - save_cache:
        paths:
          - ./node_modules
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: build and unit tests
        command: npm run test:unit

  integrationTests:
    executor: docker_executor
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: Install Packages
        command: |
          sudo rm -rf /opt/circleci/.nvm
          sudo apt-get update
          sudo apt-get install -y git python make gcc g++ bash curl
          curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
          sudo apt-get install -y nodejs
    - run:
        name: install-npm
        command: npm install
    - save_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
        paths:
        - ./node_modules
    - run:
        name: Integration tests
        command: npm run test:integration

  onChainTests:
    executor: docker_executor
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: Install Packages
        command: |
          sudo rm -rf /opt/circleci/.nvm
          sudo apt-get update
          sudo apt-get install -y git python make gcc g++ bash curl
          curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
          sudo apt-get install -y nodejs
    - run:
        name: install-npm
        command: npm install
    - save_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
        paths:
        - ./node_modules
    - run:
        name: Integration tests
        command: npm run test:integration

  generateDoc:
    executor: node_executor
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: install packages
        command: npm install
    - save_cache:
        paths:
          - ./node_modules
        key: dependency-cache-{{ checksum "package-lock.json" }}
    - run:
        name: build doc
        command: npm run generate-docs
    - run:
        name: archive doc artifact
        command: tar -czf docs.tgz ./docs
    - store_artifacts:
        path: ./docs.tgz
    - persist_to_workspace:
        root: ~/project
        paths:
          - ./docs

  publishDoc:
    executor: node_executor
    steps:
    - checkout
    - attach_workspace:
        at: /tmp/workspace
    - add_ssh_keys:
        fingerprints:
          - 'b4:b3:84:2a:8d:25:45:39:f4:b1:86:4d:d4:db:fb:b4'
    - run:
        name: Set Git user params
        command: |
          git config --global user.name $CIRCLE_USERNAME
          git config --global user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
    - deploy:
        name: Commit and push docs changes
        command: |
          # TODO for testing only
          cp -r docs /tmp/workspace/docs

          # publishing happens by pushing files to gh-pages branch
          readonly BRANCH='test-gh-pages'

          # check if branch exists on origin and if not exits with error.
          # the branch should be manually created and protected to be used.
          git ls-remote --heads --exit-code origin $BRANCH
          if [ $? != 0 ]; then
              echo "Error: ${BRANCH} branch doesn't exist on ${CIRCLE_REPOSITORY_URL}"
              exit 1
          fi

          # switch to the publishing branch
          git checkout "$BRANCH"

          # copy the content of the docs folder built on the previous job and attached
          # using workspace on temp location
          # cp with T option to override existing content, specially usefull for latest
          cp -TR /tmp/workspace/docs/* .

          ls -la
          git status

          git add *
          git commit -m "Automated SDK documentation update" \
                     -m "[skip ci] Circle CI build ${CIRCLE_BUILD_NUM}, see ${CIRCLE_BUILD_URL}" \
                     -m "Branch: ${CIRCLE_BRANCH}, commit: ${CIRCLE_SHA1}, tag:${CIRCLE_TAG-none}"
          git push --set-upstream origin $BRANCH
          git push origin

workflows:
  version: 2
  workflow:
    jobs:
    # - build
    # - generateDoc:
    #     requires:
    #       - build
    - publishDoc #:
        # requires:
        #   - generateDoc
        # filters:
        #   branches:
        #     only: master
